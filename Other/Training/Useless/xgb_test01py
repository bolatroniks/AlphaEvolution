#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Thu Jan  5 23:37:54 2017

@author: renato
"""

#Import libraries:
import pandas as pd
import numpy as np
import xgboost as xgb
from xgboost.sklearn import XGBClassifier
from sklearn import cross_validation, metrics   #Additional scklearn functions
from sklearn.grid_search import GridSearchCV   #Perforing grid search

import matplotlib.pylab as plt

from matplotlib.pylab import rcParams

from Trading.Dataset.Dataset import Dataset

rcParams['figure.figsize'] = 12, 4

#train = pd.read_csv('train_modified.csv')
#target = 'Disbursed'
#IDcol = 'ID'

def modelfit(alg, X, y, cv_X, cv_y, useTrainCV=False, cv_folds=5, early_stopping_rounds=50):
    
    if useTrainCV:
        xgb_param = alg.get_xgb_params()
        xg_cv = xgb.DMatrix(cv_X, label=cv_y)
        cvresult = xgb.cv(xgb_param, xg_cv, num_boost_round=alg.get_params()['n_estimators'], nfold=cv_folds,
            metrics='auc', early_stopping_rounds=early_stopping_rounds)
        alg.set_params(n_estimators=cvresult.shape[0])
    
    #Fit the algorithm on the data
    alg.fit(X, y,eval_metric='auc')
        
    #Predict cv set:
    predictions = alg.predict(cv_X)
    predprob = alg.predict_proba(cv_X)[:,1]
        
    #Print model report:
    print "\nModel Report"
    print "Accuracy : %.4g" % metrics.accuracy_score(cv_y, predictions)
    print "AUC Score (Train): %f" % metrics.roc_auc_score(cv_y, predprob)
                    
    feat_imp = pd.Series(alg.booster().get_fscore()).sort_values(ascending=False)
    feat_imp.plot(kind='bar', title='Feature Importances')
    plt.ylabel('Feature Importance Score')
    
    plt.figure ()
    plt.plot(predictions[200:300], label='Predictions')
    plt.plot(cv_y[200:300], label='cv_labels')
    plt.legend(loc='best')
    plt.show()
    
#Choose all predictors except target & IDcols
#predictors = [x for x in train.columns if x not in [target, IDcol]]

ds = Dataset(lookback_window=2, n_features=142)
ds.featpath = './datasets/Fx/Featured/NotNormalizedNoVolume'
ds.period_ahead = 1
ds.loadSeriesByNo(1, bRelabel=True)

X = ds.X[:,-1,:]
y = np.reshape(ds.y>0, len(ds.y))
cv_X = ds.cv_X[:,-1,:]
cv_y = np.reshape(ds.cv_y>0, len(ds.cv_y))


xgb4 = XGBClassifier(
 learning_rate =0.01,
 n_estimators=500,
 max_depth=5,
 min_child_weight=20,
 gamma=0,
 subsample=0.8,
 colsample_bytree=0.8,
 reg_alpha=0.005,
 objective= 'binary:logistic',
 nthread=4,
 scale_pos_weight=1,
 seed=27)


modelfit(xgb4, X[-2000:, :], y[-2000:], cv_X, cv_y)